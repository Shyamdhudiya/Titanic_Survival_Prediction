# -*- coding: utf-8 -*-
"""Titanic_Survival_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JJIser7gO6s_eRCFCsSJxvsJQxanVIE8
"""

# import Necessary library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('Titanic-Dataset.csv')
df.head()

# Display Shape
df.shape

# checking for Null Values
df.isnull().sum()

# Description of Dataset
df.describe(include='all')

# Data Cleaning
df['Age'].fillna(df['Age'].median(), inplace=True)
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
df.drop(columns=['Cabin', 'Ticket', 'Name'], inplace=True)

Male = (df['Sex'] == "male").sum()
print("Number of Males in Titanic:", Male)

Female = (df['Sex'] == "female").sum()
print("Number of Males in Titanic:", Female)

# convert numeric
le = LabelEncoder()
df['Sex'] = le.fit_transform(df['Sex'])  # male=1, female=0
df['Embarked'] = le.fit_transform(df['Embarked'])  # C=0, Q=1, S=2

df.groupby('Survived').mean()

df.corr()

sns.countplot(x='Survived', data=df)
plt.title('Survival Count')
plt.show()

alive = len(df[df['Survived'] == 1])
dead = len(df[df['Survived'] == 0])
print("Survived:", alive)
print("Dead:", dead)

df.groupby('Sex')[['Survived']].mean()

sns.barplot(x='Pclass', y='Survived', data=df)
plt.title('Survival Rate by Passenger Class')
plt.show()

"""# Split Data into Features and Target"""

X = df.drop('Survived', axis=1)
y = df['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Scale the Features"""

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""# Build and Train the Model"""

model = LogisticRegression()
model.fit(X_train, y_train)

"""# Predict and Evaluate"""

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

survived_counts = df['Survived'].value_counts()
plt.figure(figsize=(5, 5))
plt.pie(survived_counts, labels=['Dead', 'Survived'], autopct='%1.1f%%', startangle=140, colors=['red', 'green'])
plt.title('Survival Distribution')
plt.axis('equal')
plt.tight_layout()
plt.show()

